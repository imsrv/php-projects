#!/usr/bin/perl
#--------------------------------------------------------------
#  ##%TL_NAME%## ##%TL_VER%##				      
#--------------------------------------------------------------
#                    DO NOT EDIT THIS FILE                    
#--------------------------------------------------------------

eval {
  main();
};
if( $@ ) {
  print "Content-type: text/html\n\n";
  print "<b>Script Error:</b> $@";
  exit -1;
}



sub main {


$| = 1;
  addLog("Entered instal.cgi: qry_str:>>$ENV{'QUERY_STRING'}<<");
my ($mod_perl) = 0;
my ($chmod_cgi) = 0755;
my ($chmod_templ) = 0777;
my ($chmod_data) = 0777;
# databases to convert if from version < 0.8 to > 0.8
my (@databases) = (
"./data/account_list",
"./data/lost_account",
"./data/stat"
);
# files what won't be owr during update
my (@dontOverwrite) = (
"ts_rerank.dat",
"ts_reset.dat",
"accounts.dat",
"lost_account.dat",
"bestaccs.dat",
"black_url.dat",
"black_word.dat",
"error.log",
"log.log",
"stat.dat",
"stat_admin.dat",
"stat_ref.dat",
"in.log",
"out.log"
);
umask(0);
open (FILE,"./install.dat");

my ($time);
$time = localtime(time());

if ($ENV{'QUERY_STRING'} eq "") {
  addLog(">>> NEW INSTALL/UPGRADE <<<");
}

# DON'T CHANGE !!!!!!
my ($old_ver)="Unknown";
my ($verOld);
if (-e "./data/config.dat") {
  require "./data/config.dat";
  $verOld= $config::version;
}
local ($ver) = (<FILE>);
#print "Version: $ver\n";
# Code before seek to the end of the file ....
# so, it's necces.. to seek to rigth position  ... after VESION
seek(FILE,length($ver),0);

my ($data) = 0;
my ($shell) = 1;
my ($fname) = 0;
my ($cgi) = 0;
my ($write) = 0;
local ($interpreter,$path_docs,$path_cgis,$path_url_cgis,$path_url_html,$tlName,$checksum1,$checksum2,$pwdCrypted);
local ($login,$pwd1,$pwd2);
local ($accType) = 0;
local($ok) = 0;
my ($inst_type) = 0;

# FROM SHELL
if ( $ENV{'REQUEST_METHOD'} eq "") {
print "Run from browser\n";
exit 0;
addLog("Entered shell section");
print "\n\n";
print "|----------------------------------------------- - -  -   -\n";
print "|  Would you like to install new toplist\n";
print "|  or just upgrade you existing one?\n";
print "|  To install NEW type \"N\"\n";
print "|  (This will destroy all files with the same name as files\n";
print "|  being installed)\n|\n";
print "|  To upgrade type \"U\"\n";
print "|  (This will install new files but data files will be transformed\n";
print "|  Data files = accounts, templates, ...\n";
print "|  You can upgrade from older versions of tBOSS or from AutoRank Pro)\n";
print "|----------------------------------------------- - -  -   -\n";
print "|  Select [N/U]: ";

LOOS:{
  my ($key) = getc(STDIN);
  (($key eq "U") || ($key eq "u")) && do{upgradeShell();last;};
  (($key eq "N") || ($key eq "n")) && do{installShell();last;};
  exit(0);
 }
 
 
}

# FROM BROWSER
elsif ( $ENV{'QUERY_STRING'} =~ /install/ ) {
#my ($interpreter,$path_docs,$path_cgis,$path_url_cgis,$path_url_html);

open(FILETHIS,$0);
$interpreter = <FILETHIS>;
$interpreter =~ s/#!//;
close(FILETHIS);
$path_docs = getDocRoot();
$path_cgis = getCGIBIN();
$path_sendmail = getMail();
$path_crontab =  getCron();
$tlName = "Put there UNIQUE name !";


addLog("Entered shell section: SUB1");
print "Content-type: text/html\n\n";
printCSS();
print <<INFO2;
<html>
<head>
<script>
function pleasewait (input) {
 input.form.submit();
}
</script>
<title>tBOSS Install</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body >
<form method="get" action="install.cgi">
<div class="mainTitle">
Install New Toplist
<BR>
<BR>
</div>
<div class="infoText">
!! Read this first !!<br>
All fields to fill are important, so before you'll do anything read the manual. <br><!-- ' -->

Some items are prefilled by installer. These information should be correct and <br>
proper for you but you have to check them. <br>


The path to perl interpreter is read-only and is grabbed from this installer<br>
(first line in install.cgi) In case that you'll change the path to interpreter later <br><!-- ' -->
you  are able to change it by upgrade process [more info in the manual] <br>
</div>
<br><br><br>
Toplist Name:<BR>
<div class="exampleText">Give to each of your toplists unique name (TOP10TL1,...)</div>
<input type="text" name="fieldTLNAME" value="$tlName" size="80">
<BR>
<BR>

HTML Directory:<BR>
<div class="exampleText">(/lib/local/apache/htdocs)</div>
<input type="text" name="fieldDOCS" value="$path_docs"  size="80">
<BR>
<BR>
Path to CGIs:<BR>
<div class="exampleText">(/lib/local/apache/cgi-bin/trade)</div>
<input type="text" name="fieldCGIS" value="$path_cgis"  size="80">
<BR>
<BR>
CGI URL:<BR>
<div class="exampleText">(http://www.domain.com/cgi-bin/trade)</div>
<input type="text" name="fieldCGIURL" value="http://yourdomain/cgi-bin"  size="80">
<BR>
<BR>
HTML URL:<BR>
<div class="exampleText">(http://www.damoan.com/trade)</div>
<input type="text" name="fieldHTMLURL" value="http://yourdomain"  size="80">
<BR>
<BR>
Perl interpreter Directory:<BR>
<div class="exampleText">(/usr/bin/perl)</div>
<input type="text" name="fieldPERL" value="$interpreter" read-only  size="80">
<BR>
<BR>
Send Mail Directory:<BR>
<div class="exampleText">(/usr/bin/sendmail)</div>
<input type="text" name="fieldMAIL" value="$path_sendmail"  size="80">
<BR>
<BR>

CronTab Directory:<BR>
<div class="exampleText">(/usr/bin/crontab)</div>
<input type="text" name="fieldCRON" value="$path_crontab"  size="80">
<BR>
<BR>
Admin LOGIN, PWD Section
<br>
<BR>
Security Type (check, to use .htaccess)<br>
<input type="checkbox" name="fieldHTACCESS" value="1"  checked>
<BR>
<BR>
Login name:<BR>
<div class="exampleText">(webmaster or admin or ...)</div>
<input type="text" name="fieldLOGIN" value="admin"  >
<BR>
<BR>
Password:<BR>
<div class="exampleText">(what do you want)</div>
<input type="text" name="fieldPWD1" value="1234"  >
<BR>
<BR>
Password reenter:<BR>
<div class="exampleText">(the same as above)</div>
<input type="text" name="fieldPWD2" value=""  >
<BR>
<BR>
<input type="hidden" name="Sub2" value="Install">
<input type="button" name="Sub2" value="Install" size="20" onClick="pleasewait(this);">


</form>
</body>
</html>

INFO2

}

elsif ( (split(/\=/,$ENV{'QUERY_STRING'}))[0] eq "" ) {
# if from HTTP client
addLog("Entered html shell section: default");
print "Content-type: text/html\n\n";
printCSS();
my ($test)=1;
print <<INFO10;
<html>
<head>
<title>tBOSS Install</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<script>
function serverInfo() {
  wind = window.open("install.cgi?serverinfo","HelpWindow","toolbar=no,scrollbars=no,alwaysRaised=yes,width=550,height=250,dependent=yes,resizable=no,titlebar=no,status=no,screenx=100,screeny=100");
}



function f_wait(input) {
  if (input.form.elements[0].checked) {
//   alert("INSTALL");
  }
  else {
//   alert("UPGR");  
  }
  input.form.submit();
}
</script>
</head>

<body bgcolor="#FFFFFF">
<form method="get" action="install.cgi">
<div class="mainTitle">
tBOSS Installation Manager</div>
<div class="copyright">
<b>COPYRIGHT © 2000-2002 xxxScripts. ALL RIGHTS RESERVED</b>
</div>
<BR><BR>

<pre class="infoText">
Welcome dear customer.
<br>
Please, first read the legal notice.
</pre>
<div class="copyright">
COPYRIGHT NOTICE<br>
 This script is not freeware.  Any redistribution of this script without the written consent<br>
 of xxxScripts is strictly prohibited.  Copying any of the code contained within these <br>
 scripts and claiming it as your own is also prohibited. By using this code you agree to<br>
 indemnify xxxScripts from any liability that might arise from it's use.<br>                          <!--' -->                    
<br>                                                                               
TECHNICAL SUPPORT NOTICE<br>
 You will not be eligible for technical support if you modify any of the scripts in this<br>
 software package other than setting the location of perl in the first line of each of<br>
 the scripts.  Any editing can result in copyright violations, and will automatically suspend<br>
 your technical support.<br>  
</div>
<br>
<b>Before installing.</b><br>
<br>
If you are installing this toplist for the first time choose INSTALL. This will provide<br>
you through necessary settings to operate the toplist properly. You will have to know <br>
full paths to CGI dir,HTML dir, sendmail and crontab dirs.<br>
<br>
If you want just upgrade existing toplist to newer version choose upgrade. All information<br>
will be used from previous installation.<br><br>


<i>You are currently running on version: $verOld<i><br><br>

        <input type="radio" name="radiobutton" value="install" checked>
	Install new tBOSS $ver<br>

INFO10
if (-e "./data/config.dat") {
  print "<input type=\"radio\" name=\"radiobutton\" value=\"upgrade\">";
  print	"Upgrade to tBOSS $ver	<BR>";
}
print <<INFO10f;
<input type="button" name="sub10" value="Process" onClick="f_wait(this);">

</form>
</body>
</html>

INFO10f



}
elsif ( $ENV{'QUERY_STRING'} =~ /autorank/ ) {
addLog("Entered html shell section: autorank");
# if from HTTP client
 print "Content-type: text/html\n\n";
 my @data;
 my $path;
 @data = split (/\&/,$ENV{'QUERY_STRING'});
 foreach $dat (@data) {if ($dat =~ /textPATH/) {(undef,$path) = split(/\=/,$dat)}}
 $path =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C",hex ($1))/eg;
 upgrade("autorank".$path);
}
elsif ( $ENV{'QUERY_STRING'} =~ /another/ ) {
print "Content-type: text/html\n\n";
printCSS();
print <<INFO111;
<html>
<head>
<title>tBOSS $ver Install</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#FFFFFF">
<form method="get" action="install.cgi">
<p><font color="#9999FF"><b><font face="Verdana, Arial, Helvetica, sans-serif" color="#6666FF">
Please, first read this
<BR>
UNSUPPORTED !!!!!!!!!!!!!
<BR>
<BR>
</body>
</html>
INFO111

exit(0);
}


elsif ( $ENV{'QUERY_STRING'} =~ /upgrade/ ) {
# if from HTTP client
addLog("Entered html shell section: upgrade");

# IF OLDER VERSION OF tBOSS
if (-e "./data/config.dat") {
  require "./data/config.dat";
  $path_docs = $config::document_root;
  $path_cgis = $config::cgi_path;
  $old_ver = $config::version;
  $path_url_cgis = $config::virtual_cgi_path;
#  print "Upgrade from Traffic Pro $old_ver to $ver\n";  
  upgrade($old_ver);
}

# NOT TRAFFIC PRO
else {
print "Content-type: text/html\n\n";
printCSS();
print <<INFO11;
<html>
<head>
<title>tBOSS $ver Upgrade from $old_ver</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#FFFFFF">
<form method="get" action="install.cgi">
<p><font color="#9999FF"><b><font face="Verdana, Arial, Helvetica, sans-serif" color="#6666FF">
<BR>
Upgrade error. There must be existing installation. <BR>

<BR>
<BR>
</font></b></font></p>
<p>&nbsp;</p>



<!--
<body bgcolor="#FFFFFF">
<form method="get" action="install.cgi">
<p><font color="#9999FF"><b><font face="Verdana, Arial, Helvetica, sans-serif" color="#6666FF">
<BR>
If upgrading from AutoRank set path to account database<BR>
        <input type="text" name="textPATH" value="./sdata/members" checked>
<BR>
<BR>
</font></b></font></p>
<p>&nbsp; </p>
        <input type="radio" name="radiobutton" value="autorank" checked>
	Upgrade from AutoRank<br>
        <input type="radio" name="radiobutton" value="another">
	Upgrade from Another software (not supported)<br>
        <input type="submit" name="Sub22" value="OK">

-->
</form>
</body>

</html>

INFO11
}



}

else {
addLog("Entered html shell section: fill variables");
my (@key_value) = split(/\&/,$ENV{'QUERY_STRING'});
$mod_perl = 1;
my ($errorList) = "";
foreach $key_value (@key_value) {
($key,$value) = split(/\=/,$key_value);
#  substPlusWithPause
#  convertHexaToChar
 $value =~ s/\+/" "/eg;
 $value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C",hex ($1))/eg;
 
 ($key eq "fieldDOCS") && do {genPath($value);if (checkVal($key,$value)) {$path_docs = $value} else{$errorList .= "-> HTML Documents Root Path doesn't exist <BR>\n"} };
 ($key eq "fieldCGIS") && do {genPath($value); if(checkVal($key,$value)) {$path_cgis = $value} else{$errorList .= "-> CGI Path doesn't exist <BR>\n"} };
 ($key eq "fieldMAIL") && do {if (checkVal($key,$value)) {$mail = $value     } else{$errorList .= "-> Mail agent path doesn't exist <BR>\n"} };
 ($key eq "fieldCRON") && do {if (checkVal($key,$value)) {$cron = $value     } else{$errorList .= "-> Crontab path doesn't exist <BR>\n"} };
 ($key eq "fieldLOGIN") && do {$login = $value}; 
 ($key eq "fieldPWD1") && do { $pwd1 = $value};
 ($key eq "fieldPWD2") && do { $pwd2 = $value};    
 ($key eq "fieldHTACCESS") && do { $accType = $value };      
 ($key eq "fieldPERL") && do { $interpreter = $value };
 if ($interpreter ne "") {$mod_perl = 0;} 
 ($key eq "fieldCGIURL") && do { $path_url_cgis = add_http($value)};
 ($key eq "fieldHTMLURL") && do  {$path_url_html = add_http($value)};
 ($key eq "fieldTLNAME") && do  {$tlName = $value}; 
 

}

# reasons to exit
if ($pwd1 ne $pwd2) {
  $errorList .= "-> PWD Error: 1st and 2nd pwds aren't same <BR>";
}
 
# reasons to exit
if ($errorList ne "") {
  print "Content-type: text/html\n\n";
  printCSS();
  print "<div class=\"warningText\">";
  print "<H3>These errors occurred:<BR></H3>";
  print "$errorList\n";
  print "<BR> Please press BACK and correct errors<BR>";
  print "</div>";
  exit 0;
}

addLog("VARIABLES:");
addLog("html_path: $path_docs");
addLog("cgi_path: $path_cgis");  
addLog("cgi_url: $path_url_cgis");  
addLog("html_url: $path_url_html");  


#print "Content-type: text/html\n\n";

$okok = 1;
$shell = 0;
# use htaccess	 else   use pwd through cookies
$pwdCrypted = cryptPWD($pwd1);
unpack_data();
# create htpasswd even the htaccess is not used.
# when changed in setup to us HTaccess , only .htaccess
#file is generated and .htpasswd must exist
`htpasswd -b -c $path_cgis/admin/.htpasswd $login $pwd1`;
if ($accType) {  genHTAccess(); }
# save encrypted pwd into data file
cpyLabel();

print "Location: $path_url_cgis/admin.cgi\n\n";
}

}

sub unpack_data {
addLog("Run function: unpack_data");
if ($okok) {
addLog("OKOK");
while (<FILE>) {
 if (/checksum:([0-9]*)-([0-9]*)/) {addLog("Checksum original: $1-$2 new: $checksum1-$checksum2");}
 checkSum(\$checksum1,\$checksum2,"$_"); 
 s/%#TL_URL#%/"$path_url_html"/ie; 
  do {
    if (/^#%Dir:\s*\.([^%#]*)/) {
    addLog("Creating dir: $path_cgis$1");
#      $shell? print "Creating dir: $1\n" : print "Creating dir: $1<BR>\n";
      `mkdir $path_cgis$1`;
      
      `chmod 777 $path_cgis$1`;

    }
    
    if (/#%EOF%#/) {
     $write = 0;
     s/#%EOF%#//;
     chomp;
     print FXXX $_;     
     close(FXXX);
     if ($fname =~ /.(cgi|pm)/) {`chmod 755 $path_cgis$fname`;} else
                            {`chmod 666 $path_cgis$fname`;}

    }



    if ($write) {
      s/##%TL_NAME%##/"tBOSS"/;
      chomp $ver;
      s/##%TL_VER%##/$ver/e;
      if ($fname =~ /\.(cgi|pm|dat)/) {   s|(require\s*\"\s*)\./(.*)|"$1$path_cgis\/$2"|ie;  }
     my ($buff) = $_;
     my ($statX1)     = 0;

       if ($fname =~ /var.dat/) {
         $statX1++;
         if ($buff =~ /\$htAccessUse\s?\=/) {
	  print FXXX "\$htAccessUse \= $accType\;\n";
	 }
	 
	 elsif ($buff =~ /\$topListID\s?\=/) {
	  print FXXX "\$topListID \= \"$tlName\"\;\n";
	 }
	 
	 
	 else {
	  print FXXX $buff;	 
	 }
       }


   
       if ($fname =~ /config.dat/) {
         $statX1++;
         if ($buff =~ /\$adminLogin\s?\=/) {
	  print FXXX "\$adminLogin \= \"$login\"\;\n";
	 }
         elsif ($buff =~ /\$adminPWD\s?\=/) {
	  print FXXX "\$adminPWD \= \"$pwdCrypted\"\;\n";
	 }
         elsif ($buff =~ /\$document\_root\s?\=/) {
	  print FXXX "\$document_root \= \"$path_docs\"\;\n";
	 }
         elsif ($buff =~ /\$virtual\_cgi\_path\s?\=/) {
	  print FXXX "\$virtual_cgi_path \= \"$path_url_cgis\"\;\n";
	 }
         elsif ($buff =~ /\$url\_html\s?\=/) {
	  print FXXX "\$url_html \= \"$path_url_html\"\;\n";
	 }
         elsif ($buff =~ /\$cgi\_path\s?\=/) {
	  print FXXX "\$cgi_path \= \"$path_cgis\"\;\n";
	 }
#$phpInPath= "/www/html/in.php3";
#$phpInUrl= "http://localhost/in.php3";
#$phpOutPath= "/www/html/out.php3";
#$phpOutUrl= "http://localhost/out.php3";
         elsif ($buff =~ /\$phpInPath\s?\=/) {
	  print FXXX "\$phpInPath \= \"$path_docs/in.php\"\;\n";
	 }
         elsif ($buff =~ /\$phpOutPath\s?\=/) {
	  print FXXX "\$phpOutPath \= \"$path_docs/out.php\"\;\n";
	 }
         elsif ($buff =~ /\$phpInUrl\s?\=/) {
	  print FXXX "\$phpInUrl \= \"$path_url_html/in.php\"\;\n";
	 }
         elsif ($buff =~ /\$phpOutUrl\s?\=/) {
	  print FXXX "\$phpOutUrl \= \"$path_url_html/out.php\"\;\n";
	 }
         elsif ($buff =~ /\$interpreter\s?\=/) {
	  print FXXX '$interpreter'." \= \"$interpreter\"\;\n";
	 }
	 else {
	  print FXXX $buff;
	 }
       } # if config.dat
       if (! $statX1) {
         print FXXX $buff;
       }
    }

    if (/^#%File:\s*\.([^%#]*)/) {
      addLog("Extracting file: $path_cgis$1");
#      $shell? print "Extracting file: $1":print "Extracting file: $1\n";
      if (open(FXXX,"> $path_cgis$1")) {
	$fname = $1;
        $write = 1;
#	print "mod_perl $mod_perl  file $fname\n";
	if ((!$mod_perl)&&($fname =~ /.(cgi|pm)/)) {print FXXX "#!$interpreter\n";}
      }else {      addLog("Error creating file: $path_cgis$1"); }
    }
  };
  (/#%START_DATA%#/) && do {$data = 1;};
}
}
close (FILE);
}

sub genPath {
$path =shift;
$subPath="";
foreach (split(/\//,$path)) {
  $subPath .= "/$_";
  if (! -e $subPath) {
    mkdir ($subPath);
  }
}

}

sub upgrade {
checkDBM();
addLog("Run function: upgrade");
$okok = 1;
$shell = 0;
require "./data/config.dat" if (-e "./data/config.dat");
$path_cgis = $config::cgi_path;
$path_docs = $config::document_root;
$path_url_html = $config::url_html;
$interpreter = $config::interpreter;

#local ($interpreter,$path_docs,$path_cgis,$path_url_cgis,$path_url_html,$tlName,$checksum1,$checksum2);

unpack_data_ugrd();
cpyLabel();
print "Location: $config::path_url_cgis/admin.cgi\n\n";
}

sub upgradeShell {
checkDBM();
addLog("Run function: upgradeShell");
$okok = 1;
require "./data/config.dat" if (-e "./data/config.dat");
$path_cgis = $config::cgi_path;
$interpreter = $config::interpreter;
unpack_data_ugrd();
cpyLabel();
exit (0);
}

sub unpack_data_ugrd {
addLog("Run function: unpack_data_upgr");
if ($okok) {
rename("./data/config.dat","./data/config.dax");
rename("./data/var.dat","./data/var.dax");
while (<FILE>) {
  if (/checksum:([0-9]*)-([0-9]*)/) {addLog("Checksum original: $1-$2 new: $checksum1-$checksum2");}
  checkSum(\$checksum1,\$checksum2,"$_"); 
  s/%#TL_URL#%/"$path_url_html"/ie; 
 
  do {
    if (/^#%Dir:\s*\.([^%#]*)/) {
      addLog("Creating dir: $path_cgis$1");
      `mkdir $path_cgis$1`;
      `chmod 777 $path_cgis$1`;
    }
    
    if (/#%EOF%#/) {
     $write = 0;
     s/#%EOF%#//;
     chomp;
     print FXXX $_;     
     close(FXXX);
     if ($fname =~ /.(cgi|pm)/) {`chmod 755 $path_cgis$fname`;} else
                            {`chmod 666 $path_cgis$fname`;}

    }



    if ($write) {
      s/##%TL_NAME%##/"tBOSS"/;
      s/##%TL_VER%##/$ver/e;
      if ($fname =~ /\.(cgi|dat|pm)/) {   s|(require\s*\"\s*)\./(.*)|"$1$path_cgis\/$2"|ie;  }    
     my ($buff) = $_;

	  print FXXX $buff;
      
    }


    if (/^#%File:\s*\.([^%#]*)/) {
    my ($backup) = $1;
    chomp $backup;
	JUMP: {
	  foreach my $dont (@dontOverwrite) {
	    if ($backup eq $dont) {
	      addLog("Skipping file $backup, because in Don\'t overwrite $dont");
	      last JUMP;
	    }
	  }
	  # skip also users templates
          if ( !($1 =~ /defaults/) && ($1 =~ /temps/))
	   #  plus templates /later/
           {
	      addLog("Skipping file $backup, because it's user def template");	   
	    last JUMP;
	  }
      addLog("Extracting File $path_cgis$backup");
#      $shell? print "Extracting file: $1":print "Extracting file: $1\n";
      
      if (open(FXXX,"> $path_cgis$backup")) {
	$fname = $backup;
        $write = 1;
	if ((!$mod_perl)&&($fname =~ /.(cgi|pm)/)) {print FXXX "#!$interpreter\n";}
      }else {
	    addLog("Error creating File: $path_cgis$backup ");
      }
     } #jump 
    }
    
  };
  (/#%START_DATA%#/) && do {$data = 1;};
}
}
close (FILE);
updateConfig();
updateVar();
}


sub updateConfig {
#%AREASYSTEM_BEGIN%#
addLog("Run function: updateConfig");
my ($statProt) = 0;
my ($var,$data,$value1,$value2,$value3,$value4);
addLog("Updating Config ...");
open (CONFIGA,"./data/config.dat");
open (CONFIGB,"./data/config.dax");
open (CONFIGC,"> ./data/config.day");
while (<CONFIGA>) {
# determinates which part of config file being processed
  (/#%AREASYSTEM_BEGIN%#/) && do {$statProt = 1;};
  (/#%AREASYSTEM_END%#/) && do {$statProt = 0;};
  (/#%AREAUSER_BEGIN%#/) && do {$statProt = 2;};
  (/#%AREAUSER_END%#/) && do {$statProt = 2;};
  
  if ((/([^=]*)=([^;]*;)/x) && ($statProt==2)) {
    $var = $1;
    $data = $2;
    seek(CONFIGB,1,0);my $check = 0;
XXX:{ while (<CONFIGB>) {
      if (/([^=]*)=([^;]*;)/x) {
        $value4 = $1;$value2 = $2;
        $value4 =~ s/\s*//gise;
	$var =~ s/\s*//gise;
        if ($value4 eq $var) {
          print CONFIGC $var."\=".$value2."\n";
          $check = 1;last XXX;
        }
      else {
      }
     } 
    }#while
} # XXX    
   if (!$check) {print CONFIGC $var."\=".$data."\n";}
  } # if   
  else {print CONFIGC $_;}
   
}# while

close(CONFIGA);close(CONFIGB);close(CONFIGC);
rename("./data/config.day","./data/config.dat");
unlink("./data/config.dax");
}

sub updateVar {
addLog("Run function: updateVar");
my ($buff,$var,$data);
addLog("Updating Var ...");
open (CONFIGA,"./data/var.dat");
open (CONFIGB,"./data/var.dax");
open (CONFIGC,"> ./data/var.day");

while (<CONFIGA>) {

  (/#%AREASYSTEM_BEGIN%#/) && do {$statProt = 1;};
  (/#%AREASYSTEM_END%#/) && do {$statProt = 0;};
  (/#%AREAUSER_BEGIN%#/) && do {$statProt = 2;};
  (/#%AREAUSER_END%#/) && do {$statProt = 2;};
  
  if ((/([^=]*)=([^;]*;)/x) && ($statProt==2)) {




    $var = $1;
    $data = $2;
    seek(CONFIGB,1,0);
    my $check = 0;
XXX:{    while (<CONFIGB>) {
      if (/([^=]*)=([^;]*;)/x) {
        $value4 = $1;
        $value2 = $2;
        $value4 =~ s/\s*//gise;
        $var =~ s/\s*//gise;
        if ($value4 eq $var) {
          print CONFIGC $var."\=".$value2."\n";
          $check = 1;
	  last XXX;
        }
      else {

      }
     } 
    }#while
} # XXX    
   if (!$check) {print CONFIGC $var."\=".$data."\n";}
  } # if   
  else {print CONFIGC $_;}
   
}# while

close(CONFIGA);close(CONFIGB);close(CONFIGC);
rename("./data/var.day","./data/var.dat");
unlink("./data/var.dax");
}



sub installShell {
addLog("Run function: installShell");
print "\n\n";

print "Please, first read this\n";
print "You need to fill up these items:\n";
print "HTML Directory\n";
print "CGI URL\n";
print "HTML URL\n";
print "Perl interpreter Directory.\n\n\n";
print "Press ENTER to continue";

if (getc(STDIN) eq "\n") {


# ------------------------ interpreter

  print "Do you want to use External Perl
interpreter to run your CGI [Y,n]:?";
  my ($key) = getc(STDIN);
  my $input;
  my $count;

  ((($key eq "\n")) || ($key eq "y") || ($key eq "Y")) && do{
					$mod_perl = 0;
					
					
	     $interpreter = "/usr/bin/perl";	     			
             print "\nEnter correct path to Perl interpreter
(Example: $interpreter)              => ";
	     $count = sysread(STDIN,$input,50);
	     if ($count == 1) {}
	     else {chomp($input);$interpreter = $input;}
	     print "$interpreter\n";
			              };
				      
  (($key eq "N")||($key eq "n")) && do{

			              };
				      
				      
# ------------------------ path to docs				      
				      
  print "HTML Docs Directory: (/lib/web/htdocs)";
  $count = sysread(STDIN,$input,50);
  if ($count == 1) {}
  else {chomp($input);$path_docs = $input;}


  print "CGI Directory: (/lib/web/cgi-bin)";
  $count = sysread(STDIN,$input,50);
  if ($count == 1) {}
  else {chomp($input);$path_cgis = $input;}




  print "CGI URL: (http://www.xxx.yyy)";
  $count = sysread(STDIN,$input,50);
  if ($count == 1) {}
  else {chomp($input);$path_url_cgis = add_http($input);}


  print "HTML URL: (http://www.xxx.yyy)";
  $count = sysread(STDIN,$input,50);
  if ($count == 1) {}
  else {chomp($input);$path_url_html = add_http($input);}

}	
$okok = 1;
addLog("Variables:");
addLog("html_path: $path_docs");
addLog("cgi_path: $path_cgis");  
addLog("cgi_url: $path_url_cgis");  
addLog("html_url: $path_url_html");  
unpack_data();			      
cpyLabel();
exit 0;
}



sub checkDBM {
# $verOld - stara verzia
# $ver - nova verzia
my (%hashOld);
my (%hashNew);
if (($verOld < 0.8) && ($ver >= 0.8)) {
  foreach my $fname (@databases) {
    tie(%hashOld,'SDBM_File',$fname,GDBM_READER,0666);
    tie(%hashNew,'GDBM_File',$fname,GDBM_WRITER,0666);
    %hashNew = %hashOld;
    untie(%hashNew);
    untie(%hashOld);  
    unlink ("$fname.pag");unlink ("$fname.dir");
  }
}
}

sub cpyLabel {
#  fCopy("$path_cgis/pics/traffic.png","$path_docs/traffic.png");
  if (-e "$path_cgis/data/var.dat") {
    require "$path_cgis/data/var.dat";
    fCopy("$path_cgis/css/skin_$var::selectedSkin".".css","$path_docs/main.css");
  }
  else{
    fCopy("$path_cgis/css/skin_default.css","$path_docs/main.css");
  }
  fCopy("$path_cgis/jscript/main.js","$path_docs/main.js");  
}


sub fCopy {
my ($src) = shift;
my ($dest) = shift;

  if ( open(FXSource,"$src") &&   open(FXdest,"> $dest")  ){
  foreach (<FXSource>) {
    s/\$([A-Za-z_]*)/${$1}/i;
    print FXdest ($_);
  }
  close(FXSource);close(FXdest);
  addLog("File copy: from \"$src\" to \"$dest\"");  
  }
  else {
    addLog("Error open or create file \"$src\" or \"$dest\"");
  }
}

sub genHTAccess {
  # create .htpasswd file
  if (open(FHTACCES,"> $path_cgis/admin/.htaccess")) {
    print FHTACCES ("AuthUserFile $path_cgis/admin/.htpasswd\n");
    print FHTACCES ("AuthName \"TOPLIST Admin\"\n");  
    print FHTACCES ("AuthType Basic\n");    
    print FHTACCES ("<LIMIT GET POST>\n");    
    print FHTACCES ("require user $login\n");      
    print FHTACCES ("</LIMIT>\n");        
    close(FHTACCES);
  }
  else {
    addLog("Error create $path_cgis/admin/.htaccess");
  }
  
}

sub getDocRoot {
  return $ENV{'DOCUMENT_ROOT'} ? $ENV{'DOCUMENT_ROOT'} : "Unknown";
}

sub getCGIBIN {
  my $cgidir = $ENV{'SCRIPT_FILENAME'};
  $cgidir =~ s/\/server\.(.*)$//i;
  $cgidir = "Unknown" unless(defined $dir);
  my $xcgidir = `pwd`;

  return $xcgidir ? $xcgidir : $cgidir;
}

sub getMail {
  my @cm = qw( /usr/sbin/sendmail /usr/bin/sendmail /usr/lib/sendmail /var/qmail/bin/qmail-inject );
  for( @cm ) {
    return $_ if( -x $_ );
  }
  return "Unknown";
}

sub getCron {
  my @cm = qw( /usr/sbin/crontab /usr/bin/crontab /usr/lib/crontab );
  for( @cm ) {
    return $_ if( -x $_ );
  }
  return "Unknown";
}

sub checkVal {
my ($key) = shift;
my ($value) = shift;

if ( "fieldMAIL,fieldCRON,fieldDOCS,fieldCGIS,fieldPERL" =~ $key ) {
  if (-e $value) {addLog("Check OK val:$value, key:$key"); return 1; } else { addLog("Check Failed val:$value, key:$key");     return 0; }
}
else {


# ($key eq "fieldLOGIN") && do {$login = $value}; 
# ($key eq "fieldPWD1") && do { $pwd1 = $value};
# ($key eq "fieldPWD2") && do { $pwd2 = $value};    
# ($key eq "fieldHTACCESS") && do { $accType = $value };      
}
}


sub checkSum {
my ($ch1) =shift;
my ($ch2) =shift;
my ($data) =shift;
my ($length) = length $data;
$$ch1 += length $data;
$length++;
while (--$length) {
$$ch2 +=  ord (substr($data,$length-1,1));
}

}
sub cryptPWD {
  my ($p) = shift;
  return crypt($p,substr($p,0,2));
}




sub openFile {
  umask(0);
  open (ILOG,">> ./install.log");
  if ( (stat(ILOG))[7] > 100000  ) {
    # log ILOG 
    close(ILOG);
    open (ILOG,"> ./install.log");
  }
}

sub closeFile {
  close ILOG;
}



sub addLog {
my ($message) = shift;
my ($time);
# time format
  $time = localtime(time());
  if ( (stat("./install.log"))[7] > 1000000 ) {
    unlink "./install.log";
  }
  openFile();
  print ILOG "$message at:$time\n";
  closeFile();
}





sub substPlusWithPause{
my ($param) = shift;
my ($key,$value);

while (($key,$value) =  (each %$param)) {
    $value =~ s/\+/" "/eg;
    $$param{$key} = $value;
  }
}

sub convertHexaToChar {
my ($param) = shift;
my ($key,$value);
while (($key,$value) =  (each %$param)) {
    $value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C",hex ($1))/eg;
    $$param{$key} = $value;
  }
}



sub add_http {
my ($ref) = shift;
if (!($ref =~ /^http\:\/\//)) {$ref = "http://".$ref}
return $ref;
}






sub printCSS {
print <<CSS;



<style>
body,input  { 	background-color:
#81A5DC;
	color:#CDD0E2;
	font-family: Arial, Helvetica, sans-serif; 
	font-size: 12px;
	word-spacing: normal;
	letter-spacing: normal;
	border-color:
#81A5DC;
	font-weight:700;
 }


body {
	margin: 35px;
	font-weight: 800;
	
}

input[type="text"] {
	height:17pt;
	padding: 2px;
	size=20;
}


input[type="submit"] {
	height:17pt;
	padding: 0px;
	margin: 0px;
}

input[type="checkbox"],input[type="radio"] {
	height:10pt;
	width:10pt;	
	margin: 0pt;
}


.mainTitle {
	color: #C8CFE1;
	font-weight:800;
	font-size:18pt;
}

.copyright {
	color: #CDD0E2;
	font-weight:100;
	font-size:10pt;
}


.warningText {
	color: #FFB7B9;
	font-family: Arial, Helvetica, "sans-serif filter"
	filter: Glow(Color=white, Strength=5)
	
}


.infoText { 
	color: #FFC6CC;
	font-family: Arial, Helvetica, sans-serif;
	filter: Glow(Color=white, Strength=5)
}


.exampleText { 
	color: #E3C6CC;
	font-family: Arial, Helvetica, sans-serif;
	filter: Glow(Color=white, Strength=5)

}

input[type="text"]:focus {
	color: #FFFFFF;
}

</style>
CSS
}