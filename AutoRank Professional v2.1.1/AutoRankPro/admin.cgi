#!/usr/bin/perl
####################################
##  AutoRank Professional v2.1.1  ##
###############################################################
##  admin.cgi                                                ##
##  ---------                                                ##
##  This script controls the administrative interface.       ##
###############################################################

###############################################################
##                   DO NOT EDIT THIS FILE                   ##
###############################################################

package adm;

use strict;
use GDBM_File;

print "Content-type: text/html\n\n";
  
eval {
  require "functions.cgi";
};

if( $@ ) {
  print "<b>Script Error:</b> $@";
  exit -1;
}

my($frm, %mem, %tmpl, %data, %bans);

if($ENV{'REQUEST_METHOD'} eq "GET") {
  fnct::parsetmpl("_admin_login.htmlt", \%tmpl);
}
elsif($ENV{'REQUEST_METHOD'} eq "POST") {
  $frm = fnct::parse();
  
  fnct::derror(1000, "Invalid Password") unless fnct::pisv($frm->{'pw'});
  
  my $call = lc($frm->{'submit'});
  $call =~ s/ /_/g;
  
  fnct::derror(1010, "No Function Selected") unless( $call );
  
  *function = $call;
  
  eval {
    &function();
  };
   
  if($@) {
    print "<b>Script Error:</b> $@";
  }    
}
else {
  print "ERROR: This script should be run from a browser\n\n";
}

sub execute_function {
  my $call = ($frm->{'function'} eq "execute") ? $frm->{'to_do'} : $frm->{'function'};
  
  *function = $call;
  
  fnct::derror(1010, "No Function Selected") unless( $call );
  
  eval {
    &function();
  };
   
  if($@) {
    print "<b>Script Error:</b> $@";
  }  
}

sub display_all {
  my $msg = shift;

  $tmpl{'HEIGHT'}  = $VAR::BH ne "" ? $VAR::BH + 20 : "80";
  $tmpl{'WIDTH'}   = $VAR::BW ne "" ? $VAR::BW + 20 : "500";
  $tmpl{'QUERY'}   = "display_all";
  $tmpl{'WHAT'}    = "All Members";
  $tmpl{'MESSAGE'} = $msg;
  $tmpl{'DATA'}    = get_all();
  $tmpl{'HIDDEN'}  = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">|;

  fnct::parsetmpl("_admin_all.htmlt", \%tmpl);
}

sub display_bans {
  my $message = shift;
  my $bans_html = get_bans_html();
  
  $tmpl{'MESSAGE'}       = $message;
  $tmpl{'EMAIL_BANS'}    = $bans_html->[0];
  $tmpl{'WORD_BANS'}     = $bans_html->[1];
  $tmpl{'DOMAIN_BANS'}   = $bans_html->[2];
  $tmpl{'HIDDEN'} = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">\n|;
  
  fnct::parsetmpl("_admin_bans.htmlt", \%tmpl);
}

sub log_in {
  my $msg = shift;
  
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::log_in()", $!, $frm);
  $tmpl{'TOTAL'} = scalar( grep { !/_REV$/ } keys %mem );
  
  $tmpl{'NEW'} = "N/A";
  if( $OPT::REV ) {
    $tmpl{'NEW'} = scalar( grep { /_REV$/ } keys %mem );
  }
  
  dbmclose(%mem);
  
  dbmopen(%data, "$fnct::sd_dir/info", 0666) || fnct::serror("data", "adm::log_in()", $!, $frm);
  
  $tmpl{'RESET'}    = $data{'reset'} ne "" ? fnct::ttos( time - $data{'reset'} ) : "N/A";
  $tmpl{'RERANK'}   = $data{'rerank'} ne "" ? fnct::ttos( time - $data{'rerank'} ) : "N/A";
  $tmpl{'RRFROM'}   = $data{'rrfrom'};
  $tmpl{'RSFROM'}   = $data{'rsfrom'};
  my $lastbck       = time - $data{'backup'};
  $tmpl{'RECOMND'}  = "A database backup is recommended.<br>It has been more than 2 days since your last backup." if( $lastbck > 259200 );
  $tmpl{'COLOR'}    = $lastbck > 259200 ? "red" : "black";
  $tmpl{'BACKUP'}   = $data{'backup'} ne "" ? fnct::ttos( $lastbck ) : "N/A";
  
  dbmclose(%data);
  
  $tmpl{'MESSAGE'}  = $msg;
  $tmpl{'VERSION'}  = $fnct::ver;
  $tmpl{'HIDDEN'}   = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">|;
  $tmpl{'PAGES'}    = get_page_select();
  $tmpl{'SETUP'}    = $VAR::CU . "/setup.cgi";
  
  fnct::parsetmpl("_admin_main.htmlt", \%tmpl);
}

sub display_emails {
  $tmpl{'HIDDEN'}  = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">|;
  
  fnct::parsetmpl("_admin_emails.htmlt", \%tmpl);
}

sub display_backup {
  $tmpl{'HIDDEN'}  = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">|;

  fnct::parsetmpl("_admin_backup.htmlt", \%tmpl);
}

sub display_errlog {
  
  if( -e "$fnct::sd_dir/error.log" ) {
    open(ERRLOG, "$fnct::sd_dir/error.log");
    while( <ERRLOG> ) { $tmpl{'ERRORS'} .= $_ }
    close(ERRLOG);
  }

  $tmpl{'HIDDEN'} = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">|;

  fnct::parsetmpl("_admin_errlog.htmlt", \%tmpl);
}

sub display_stats {
  my @files;
  
  opendir(MEM, $fnct::md_dir) || fnct::serror($fnct::md_dir, "adm::display_space()", $!, $frm);
  @files = grep { /.*\.sts/ } readdir(MEM);
  for( @files ) {
    $tmpl{'TOTMEM'}++;
    $tmpl{'MEMSPACE'} += (stat("$fnct::md_dir/$_"))[7];
  }
  closedir(MEM);
  
  opendir(SD, $fnct::sd_dir) || fnct::serror($fnct::sd_dir, "adm::display_space()", $!, $frm);
  @files = grep { /^[^.]/ } readdir(SD);
  for( @files ) {
    $tmpl{'TOTSD'}++;
    $tmpl{'SDSPACE'} += (stat("$fnct::sd_dir/$_"))[7];
  }
  closedir(SD);
  
  $tmpl{'TOTFILES'} = $tmpl{'TOTSD'} + $tmpl{'TOTMEM'};
  $tmpl{'TOTSPACE'} = $tmpl{'MEMSPACE'} + $tmpl{'SDSPACE'};
  
  $tmpl{'MEMSPACE'} = sprintf("%.2f", $tmpl{'MEMSPACE'} / 1024);
  $tmpl{'SDSPACE'}  = sprintf("%.2f", $tmpl{'SDSPACE'} / 1024);
  $tmpl{'TOTSPACE'} = sprintf("%.2f", $tmpl{'TOTSPACE'} / 1024);
  
  
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::display_stats()", $!, $frm);
  
  $tmpl{'HIN'}  = 0;
  $tmpl{'HOUT'} = 0;
  $tmpl{'PREV'} = 0;
  $tmpl{'LCKD'} = 0;
  $tmpl{'SUSP'} = 0;
  $tmpl{'TOP'}  = "N/A";
  for( keys %mem ) {
    my @md = split( /\|/, $mem{$_} );
    $tmpl{'HIN'}  += $md[0];
    $tmpl{'HOUT'} += $md[1];
    $tmpl{'PREV'} += $md[3];
    $tmpl{'SUSP'}++ if( $md[13] eq "0" );
    $tmpl{'LCKD'}++ if( $md[14] eq "0" );
    $tmpl{'TOP'} = qq|<a href="$md[8]" target="_new">$md[5]</a> - $md[3] hits| if( $md[4] eq "1" );
  }
  
  dbmclose(%mem);
  
  $tmpl{'HIDDEN'} = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">|;
  
  fnct::parsetmpl("_admin_stats.htmlt", \%tmpl);
}

sub display_chtlog {
  if( -e "$fnct::sd_dir/cheat.log" ) {
    open(ERRLOG, "$fnct::sd_dir/cheat.log");
    while( <ERRLOG> ) { $tmpl{'CHEATS'} .= $_ }
    close(ERRLOG);
  }

  $tmpl{'HIDDEN'} = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">|;

  fnct::parsetmpl("_admin_chtlog.htmlt", \%tmpl);
}

sub display_icons {
  my $message  = shift;
  
  $tmpl{'MESSAGE'} = $message;
  $tmpl{'ICONS'}   = get_iconcb_html();
  $tmpl{'HIDDEN'}  = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">\n|;
  
  fnct::parsetmpl("_admin_icons.htmlt", \%tmpl);
}

sub change_password {
  fnct::parsetmpl("_admin_pass.htmlt", \%tmpl);
}

sub display_new {
  my $msg = shift;
  fnct::derror(1011, "Not Reviewing New Signups") unless( $OPT::REV );
  
  $tmpl{'HEIGHT'}  = $VAR::BH ne "" ? $VAR::BH + 20 : "80";
  $tmpl{'WIDTH'}   = $VAR::BW ne "" ? $VAR::BW + 20 : "500";
  $tmpl{'MESSAGE'} = $msg;
  $tmpl{'DATA'}    = get_new();
  $tmpl{'HIDDEN'}  = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">\n|;
  
  fnct::parsetmpl("_admin_new.htmlt", \%tmpl)
}

sub display_member {  
  my $member = ( !defined $frm->{'members'} ) ? $frm->{'un'} : (split(/,/, $frm->{'members'}))[0];
  
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::display_member()", $!, $frm);
  
  if(!defined $mem{$member}) {
    dbmclose(%mem);
    fnct::derror(1009, "Invalid Username");
  }
  
  my @md = split(/\|/, $mem{$member});
  
  dbmclose(%mem);

  $tmpl{'QUERY'}       = $ENV{'QUERY_STRING'};
  $tmpl{'EMAIL'}       = qq|<a href="mailto:$md[10]">$md[10]</a>|;
  $tmpl{'CATEGORY'}    = $md[7];
  $tmpl{'TITLE'}       = $md[5];
  $tmpl{'SITE_URL'}    = qq|<a href="$md[8]" target="_new">$md[8]</a>|;
  $tmpl{'DESCRIPTION'} = $md[6];
  $tmpl{'BANNER_URL'}  = $md[9] ? $md[9] : "n/a";
  $tmpl{'STATUS'}      = int($md[13]) ? "Active" : qq|<font color="red">Suspended</font>|;
  $tmpl{'LOCKED'}      = int($md[14]) ? "Not Locked" : qq|<font color="red">Locked</font>|;
  $tmpl{'MEM_PASS'}    = unpack('u', $md[12]);
  $tmpl{'ICONS'}       = fnct::get_icon_html($md[15]);
  $tmpl{'STATUS_OPT'}  = int($md[13]) ? qq|<option value="suspend_account">Suspend Account</option>| : qq|<option value="activate_account">Activate Account</option>|;
  $tmpl{'LOCKED_OPT'}  = int($md[14]) ? qq|<option value="lock_account">Lock Account</option>| : qq|<option value="unlock_account">Unlock Account</option>|;
  $tmpl{'HIDDEN'}      = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">\n<p>|;
  $tmpl{'HIDDEN'}     .= qq|<input type="hidden" name="un" value="$member">\n|;

  fnct::parsetmpl("_admin_member.htmlt", \%tmpl);
}

sub edit_member {
  my $member = ( !defined $frm->{'members'} ) ? $frm->{'un'} : (split(/,/, $frm->{'members'}))[0];
  
  fnct::derror(1001, "No Member Selected") if($member eq "");
   
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::display_member()", $!, $frm);
   
  my @md = split(/\|/, $mem{$member});
  
  dbmclose(%mem);
  
  my $ps = unpack('u', $md[12]);

  $tmpl{'QUERY'}           = $ENV{'QUERY_STRING'};
  $tmpl{'EMAIL_FIELD'}     =  qq|<input type="text" name="em" size="30" value="$md[10]">|;
  $tmpl{'CAT_FIELD'}       =  get_cat_select($md[7]);
  $tmpl{'TITLE_FIELD'}     =  qq|<input type="text" name="st" size="40" value="$md[5]">|;
  $tmpl{'SITE_URL_FIELD'}  =  qq|<input type="text" name="su" size="50" value="$md[8]">|;
  $tmpl{'SITE_DESC_FIELD'} =  qq|<input type="text" name="sd" size="50" value="$md[6]">|;
  $tmpl{'BAN_URL_FIELD'}   =  qq|<input type="text" name="bu" size="50" value="$md[9]">|;
  $tmpl{'HITS_IN_FIELD'}   =  qq|<input type="text" name="hi" size="10" value="$md[0]">|;
  $tmpl{'HITS_OUT_FIELD'}  =  qq|<input type="text" name="ho" size="10" value="$md[1]">|;
  $tmpl{'ACTIVE_CHOICE'}   =  get_choice( $md[13] );
  $tmpl{'LOCKED_CHOICE'}   =  get_choice( $md[14] );
  $tmpl{'ICONS'}           =  get_iconcb_html($md[15]);
  $tmpl{'PASS_FIELD'}      =  qq|<input type="text" name="np" size="12" maxlength="8" value="$ps">|;
  $tmpl{'HIDDEN'}          =  qq|<input type="hidden" name="pw" value="$frm->{'pw'}"><p>\n|;
  $tmpl{'HIDDEN'}          .= qq|<input type="hidden" name="un" value="$member">\n|;
  
  fnct::parsetmpl("_admin_editmem.htmlt", \%tmpl);
}

sub edit_files {
  require "$fnct::sd_dir/$frm->{'page'}" if (-e "$fnct::sd_dir/$frm->{'page'}");

  $tmpl{'FOOTER_HTML'}   =  $HTML::FOOTER;
  $tmpl{'HEADER_HTML'}   =  $HTML::HEADER;
  $tmpl{'TEMPLATE_HTML'} =  $HTML::TMPL;
  $tmpl{'HIDDEN'}        =  qq|<input type="hidden" name="pw" value="$frm->{'pw'}">\n|;
  $tmpl{'HIDDEN'}        .= qq|<input type="hidden" name="page" value="$frm->{'page'}">\n|;
  $tmpl{'PAGE'}          =  $frm->{'page'} ne "quick.html" ? $frm->{'page'} : "index.cgi";
    
  fnct::parsetmpl("_admin_html.htmlt", \%tmpl);
}

sub display_breaks {
  my($message, $in) = @_;
  
  $tmpl{'SELECT_LOC'} = get_break_selection();
  $tmpl{'HTML'}       = $in;
  $tmpl{'MESSAGE'}    = $message;
  $tmpl{'HIDDEN'}     =  qq|<input type="hidden" name="pw" value="$frm->{'pw'}">|;
  
  fnct::parsetmpl("_admin_breaks.htmlt", \%tmpl);
}

sub display_mail {
  my $select = shift;
  
  if( !defined $select ) {
    $select = '<option value="ALLMEM">All Members</option>';
    dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::display_mail()", $!, $frm);
    
    for( sort keys %mem ) {
      $select .= "<option value='" . ( split(/\|/, $mem{$_}) )[10] . "'>$_</option>";
    }
    dbmclose(%mem);
  }
  
  $tmpl{'QUERY'}  = $ENV{'QUERY_STRING'};
  $tmpl{'MAILS'}  = $select;
  $tmpl{'HIDDEN'} = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">|;
  
  fnct::parsetmpl("_admin_mail.htmlt", \%tmpl);
}

sub search {
  $tmpl{'WHAT'}    = "Search Results";
  $tmpl{'QUERY'}   = "log_in";
  $tmpl{'MESSAGE'} = "Search For '$frm->{'key'}' Returned The Following Results";
  $tmpl{'DATA'}    = get_all($frm->{'key'});
  $tmpl{'HIDDEN'}  = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">|;

  fnct::parsetmpl("_admin_all.htmlt", \%tmpl);
}

######################################################################
sub restore_def {
  open(DEF, "$fnct::sd_dir/def.html") || fnct::serror("def.html", "adm::restore_def()", $!, $frm);
  my @def = <DEF>;
  close(DEF);
  
  for( split( /,/, $VAR::PL ) ) {
    open(FILE, ">$fnct::sd_dir/$_") || fnct::serror($_, "adm::restore_def()", $!, $frm);
    for( @def ) {  print FILE  }
    close(FILE);
  }
  
  log_in("Default Template Has Been Restored");
}

sub email_members {
  fnct::derror(1001, "No Members Were Selected") unless( $frm->{'members'} );

  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::email_members()", $!, $frm);
  
  my $options = "";
  for( split(/,/, $frm->{'members'}) ) {
    $options .= "<option value='" . ( split(/\|/, $mem{$_}) )[10] . "' selected>$_</option>";
  }
  
  dbmclose(%mem);
  
  display_mail($options);
}

sub backup_data {
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::backup_data()", $!, $frm);
  open(MEMBCK, ">$fnct::sd_dir/$frm->{'mem'}") || fnct::serror($frm->{'mem'}, "adm::backup_data()", $!, $frm);
  for( keys %mem ) {
    next if( $_ eq "" );
    $mem{$_} =~ s/\r|\n//g;
    print MEMBCK $_ . "|" . $mem{$_} . "\n";
  }
  close(MEMBCK);
  dbmclose(%mem);
  
  dbmopen(%bans, "$fnct::sd_dir/bans", 0666) || fnct::serror("bans", "adm::backup_data()", $!, $frm);
  open(BANBCK, ">$fnct::sd_dir/$frm->{'ban'}") || fnct::serror($frm->{'ban'}, "adm::backup_data()", $!, $frm);
  for( keys %bans ) {
    next if( $_ eq "" );
    $bans{$_} =~ s/\r|\n//g;
    print BANBCK $_ . "|" . $bans{$_} . "\n";
  }
  close(BANBCK);
  dbmclose(%bans);
  
  dbmopen(%data, "$fnct::sd_dir/info", 0666) || fnct::serror("info", "adm::backup_data()", $!, $frm);
  open(OTHBCK, ">$fnct::sd_dir/$frm->{'oth'}") || fnct::serror($frm->{'oth'}, "adm::backup_data()", $!, $frm);
  for( keys %data ) {
    next if( $_ eq "" );
    my $local = $data{$_};
    $local =~ s/\r|\n//g;
    
    print OTHBCK $_ . "|" . $local . "\n";
  }
  close(OTHBCK);
  
  $data{'backup'} = time;  
  dbmclose(%data);
  
  log_in("Data Successfully Backed Up");
}

sub restore_data {
  my $line;
  
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::backup_data()", $!, $frm);
  open(MEMBCK, "$fnct::sd_dir/$frm->{'mem'}") || fnct::serror($frm->{'mem'}, "adm::backup_data()", $!, $frm);
  while( $line = <MEMBCK>  ) {
    my( $key, @rest) = split(/\|/, $line);
    if( $key ne "" ) {
      chomp($rest[$#rest]);
      $mem{$key} = join('|', @rest);
    }
  }
  close(MEMBCK);
  dbmclose(%mem);
  
  dbmopen(%bans, "$fnct::sd_dir/bans", 0666) || fnct::serror("bans", "adm::backup_data()", $!, $frm);
  open(BANBCK, "$fnct::sd_dir/$frm->{'ban'}") || fnct::serror($frm->{'ban'}, "adm::backup_data()", $!, $frm);
  while( $line = <BANBCK>  ) {
    my( $key, @rest) = split(/\|/, $line);
    if( $key ne "" ) {
      chomp($rest[$#rest]);
      $bans{$key} = join('|', @rest);
    }
  }
  close(BANBCK);
  dbmclose(%bans);
  
  dbmopen(%data, "$fnct::sd_dir/info", 0666) || fnct::serror("info", "adm::backup_data()", $!, $frm);
  open(OTHBCK, "$fnct::sd_dir/$frm->{'oth'}") || fnct::serror($frm->{'oth'}, "adm::backup_data()", $!, $frm);
  while( $line = <OTHBCK>  ) {
    my( $key, @rest) = split(/\|/, $line);
    if( $key ne "" ) {
      chomp($rest[$#rest]);
      $data{$key} = join('|', @rest);
    }
  }
  close(OTHBCK);
  dbmclose(%data);
  
  log_in("Data Successfully Restored");
}

sub reset_list {
  my $sorted = fnct::getsorted(1);
  my($date, $in, $out, $rank);
  my $junk = pop( @{ $sorted } );
  $junk = pop( @{ $sorted } );
  my @tb  = localtime;
  
  $tb[5] += 1900; 
  
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("member", "adm::reset_list()", $!, $frm);
  
  my $count = 1;
  for( @{ $sorted } ) {
    my @md = split( /\|/, $mem{$_} );
    
    open(STATS, ">>$fnct::md_dir/$_.sts") || fnct::serror("$_.sts", "adm::reset_list()", $!, $frm);
    format STATS =
@<<<<<<<<   @<<<<<<<<<<   @<<<<<<<<<<  @<<<<<
$date,      $in,          $out,        $rank
.
    $date = $tb[4] + 1 . "." . $tb[3] . "." . $tb[5];
    $in = $md[0];
    $out = $md[1];
    $rank = "$count\n";
    write STATS;
    close(STATS);
    
    chmod(0666, "$fnct::md_dir/$_.sts") if( -O "$fnct::md_dir/$_.sts" );
    
    $md[4] = $count;
    $md[3] = $md[0];
    $md[2]++ if( $md[0] eq "0" );
    $md[0] = 0;
    $md[1] = 0;
    $md[16] = "0.0.0.0";
    
    $mem{$_} = join('|', @md);
    $count++;
  }
  
  dbmclose(%mem);
  
  dbmopen(%data, "$fnct::sd_dir/info", 0666) || fnct::serror("info", "adm::reset_list()", $!, $frm);
  $data{'reset'} = time;
  $data{'rsfrom'} = "Manual";
  dbmclose(%data);
  
  log_in("List Has Been Reset");
}

sub rerank_list {
  fnct::writelist( fnct::getsorted() );
  
  tie(%data, 'GDBM_File', "$fnct::sd_dir/info", GDBM_WRITER, 0666) || fnct::serror("info", "adm::rearank_list()", $!, $frm);
  $data{'rerank'} = time;
  $data{'rrfrom'} = "Manual";
  untie(%data);
  
  log_in("List Successfully Reranked");
}

sub list_emails {

  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::list_emails()", $!, $frm);
  
  for( keys %mem ) {
    $tmpl{'EMAILS'} .= (split( /\|/, $mem{$_} ))[10] . $frm->{'ch'};
  }
  
  dbmclose(%mem);
  
  $tmpl{'HIDDEN'} = qq|<input type="hidden" name="pw" value="$frm->{'pw'}">|;
  
  fnct::parsetmpl("_admin_lstemails.htmlt", \%tmpl);
}

sub clear_error_log {
  open(ERRLOG, ">$fnct::sd_dir/error.log") || fnct::serror("error.log", "adm::clear_error_log()", $!, $frm);
  close(ERRLOG);
  
  log_in("Error Log Has Been Cleared");
}

sub clear_cheat_log {
  open(ERRLOG, ">$fnct::sd_dir/cheat.log") || fnct::serror("cheat.log", "adm::clear_cheat_log()", $!, $frm);
  close(ERRLOG);
  
  log_in("Cheat Log Has Been Cleared");
}

sub send_email {
  fnct::derror(1001, "No Members Were Selected") if( !$frm->{'addr'} );
  my $to = $frm->{'addr'} =~ /ALLMEM/ ? "all" : $frm->{'addr'};
  my @send_to;
  
  if( $to eq "all" ) {
    dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::send_email()", $!, $frm);
    
    for( keys %mem ) {
      push( @send_to, (split( /\|/, $mem{$_} ))[10] );
    }
    
    dbmclose(%mem);
  }
  else {
    for( split( /,/, $to ) ) {
      push( @send_to, $_ );
    }
  }
  
  my $pid = fork();
  fnct::derror("Couldn't Fork To Send E-mails") unless( defined $pid );

  if ($pid) {
    log_in("E-mails Are Being Sent");
  }
  else {
    my $message;
    for( @send_to ) {
      $message = "To: $_\nFrom: $VAR::EM\nSubject: $frm->{'subj'}\n\n$frm->{'msg'}";
      int($OPT::STP) ? fnct::send_smtp($message) : fnct::send_shell($message);
    }
  }
}

sub approve_acct {
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::approve_acct()", $!, $frm);
  
  for( split(/,/, $frm->{'members'}) ) {
    my $real = $_;
    $real =~ s/_REV$//i;
    
    my @md = split(/\|/, $mem{$_});
    
    my %etmpl;
    $etmpl{'EMAIL'}     = $md[10];
    $etmpl{'FROM'}      = $VAR::EM;
    $etmpl{'USER'}      = $real;
    $etmpl{'PASS'}      = unpack('u', $md[12]);
    $etmpl{'SEND_URL'}  = $VAR::CU . "/rankem.cgi?action=in&id=" . $real;
    $etmpl{'LOGIN_URL'} = $VAR::CU . "/accounts.cgi?login";
    $etmpl{'MAIN_PAGE'} = $VAR::FU;

    fnct::prep_email("_email_added.etmpl", \%etmpl);
    
    $mem{$real} = $mem{$_};
    
    delete $mem{$_};
  }
  
  dbmclose(%mem);
  
  display_new("Accounts Successfully Approved"); 
}

sub reject_acct {
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::reject_acct()", $!, $frm);
  
  for( split(/,/, $frm->{'members'}) ) {        
    my @md = split(/\|/, $mem{$_});
    
    delete $mem{$_};
    
    if( $md[10] =~ /^[\w\d][\w\d\,\.\-]*\@([\w\d\-]+\.)+([a-zA-Z]{3}|[a-zA-Z]{2})$/ ) {
      my %etmpl;
      $etmpl{'EMAIL'}     = $md[10];
      $etmpl{'TITLE'}     = $md[5];
      $etmpl{'DESC'}      = $md[6];
      $etmpl{'URL'}       = $md[8];
      $etmpl{'ACCTS_URL'} = $VAR::CU . "/accounts.cgi";
      $etmpl{'FROM'}      = $VAR::EM;
      $etmpl{'MAIN_PAGE'} = $VAR::FU;

      fnct::prep_email("_email_reject.etmpl", \%etmpl);
    }
  }
  
  dbmclose(%mem);
  
  display_new("Accounts Successfully Rejected"); 
}

sub remove_inact {
  my($count, $emails) = 0;
  
  fnct::derror(1001, "No Inactive Value Was Entered") unless( $frm->{'num'} );
  
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::remove_inact()", $!, $frm);
  
  for( keys %mem ) {
    if( $frm->{'num'} <= ( split(/\|/, $mem{$_}) )[2] ) {
      $emails .= "<option value='" . ( split(/\|/, $mem{$_}) )[10] . "' selected>$_</option>";
      delete $mem{$_};
      $count++;
    }
  }
  
  dbmclose(%mem);
  
  $count ? display_mail($emails) : log_in("No Inactive Accounts Were Removed");
}

sub update_account {
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::update_account()", $!, $frm);
  
  my @md = split(/\|/, $mem{$frm->{'un'}});
  
  my $pw = crypt($frm->{'np'}, 'aa');
  my $up = pack('u', $frm->{'np'});
  chomp($up);
  
  $mem{$frm->{'un'}} =  "$frm->{'hi'}|$frm->{'ho'}|$md[2]|$md[3]|$md[4]|$frm->{'st'}|$frm->{'sd'}|$frm->{'ct'}|$frm->{'su'}|";
  $mem{$frm->{'un'}} .= "$frm->{'bu'}|$frm->{'em'}|$pw|$up|$frm->{'ac'}|$frm->{'lc'}|$frm->{'icons'}|$md[16]|$md[17]";
  
  dbmclose(%mem);
  
  *function = $ENV{'QUERY_STRING'};
  
  $ENV{'QUERY_STRING'} ne "" ? function("Account '$frm->{'un'}' Updated") : log_in("Account '$frm->{'un'}' Updated");
}

sub delete_member {
  $frm->{'members'} = $frm->{'un'};
  delete_members();
}

sub delete_members {
  fnct::derror(1001, "No Member Was Selected") unless( defined $frm->{'members'} );
  
  for( split(/,/, $frm->{'members'}) ) {
    unlink("$fnct::md_dir/$_.dat") if( -e "$fnct::md_dir/$_.dat");
    
    dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::delete_members()", $!, $frm);
    delete $mem{$_};
    dbmclose(%mem);
  }

  *function = $ENV{'QUERY_STRING'};
  
  $ENV{'QUERY_STRING'} ne "" ? function("Member Successfully Removed") : log_in("Member Successfully Removed");
}

sub update_html {
  my (@pages, $updated);
  
  if($frm->{'action'} eq "sin") {
    push(@pages, $frm->{'page'});
    $updated = "'$frm->{'page'}'";
  }
  else {
    @pages = split(/,/, $VAR::PL);
    $updated = "All Pages";
  }
  
  $frm->{'header'}   =~ s/\r|\n$//g;
  $frm->{'footer'}   =~ s/\r|\n$//g;
  $frm->{'template'} =~ s/\r|\n$//g;
  
  for(@pages) {
    open(PAGE, ">$fnct::sd_dir/$_") || fnct::serror("$_", "adm::update_html()", $!, $frm);
    print PAGE qq|\$HTML::HEADER = <<'HD';\n$frm->{'header'}\nHD\n\n|;
    print PAGE qq|\$HTML::FOOTER = <<'FT';\n$frm->{'footer'}\nFT\n\n|;
    print PAGE qq|\$HTML::TMPL   = <<'TP';\n$frm->{'template'}\nTP\n\n1;\n|;
    close(PAGE);
  }

  log_in("HTML Updated For $updated");
}

sub suspend_account {
  my $what = 0;
  $what    = $_[0] if(defined $_[0]);
  
  my $message = (int($what)) ? "Account '$frm->{'un'}' Re-activated" : "Account '$frm->{'un'}' Suspended";
  
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::suspend_account()", $!, $frm);
  my @md = split(/\|/, $mem{$frm->{'un'}});
  
  $md[13] = $what;
  
  $mem{$frm->{'un'}} = join('|', @md);
  
  *function = $ENV{'QUERY_STRING'};
  
  $ENV{'QUERY_STRING'} ne "" ? function($message) : log_in($message);
}

sub activate_account {
  suspend_account(1);
}

sub lock_account {
  my $what = 0;
  $what    = $_[0] if(defined $_[0]);
  
  my $message = (int($what)) ? "Account '$frm->{'un'}' Un-locked" : "Account '$frm->{'un'}' Locked";
  
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::suspend_account()", $!, $frm);
  my @md = split(/\|/, $mem{$frm->{'un'}});
  
  $md[14] = $what;
  
  $mem{$frm->{'un'}} = join('|', @md);
  
  dbmclose(%mem);
  
  *function = $ENV{'QUERY_STRING'};
  
  $ENV{'QUERY_STRING'} ne "" ? function($message) : log_in($message);
}

sub unlock_account {
  lock_account(1);
}

sub save_break {
  my $who = "break $frm->{'loc'}";
  
  dbmopen(%data, "$fnct::sd_dir/info", 0666) || fnct::serror("info", "adm::save_break()", $!, $frm);
  
  if( defined $frm->{'all'} ) {
    
    for( split(/,/, $VAR::BA) ) {
      $data{$_} = $frm->{'html'};
    }
    
    $who = "all breaks";
  }
  else {
    $data{$frm->{'loc'}} = $frm->{'html'};
  }
  
  dbmclose(%data);
  
  display_breaks("Saved HTML for $who", undef);
}

sub load_break {
  dbmopen(%data, "$fnct::sd_dir/info", 0666) || fnct::serror("info", "adm::load_break()", $!, $frm);
  my $html = $data{$frm->{'loc'}};
  dbmclose(%data);
  
  display_breaks("Loaded HTML for break $frm->{'loc'}", $html);
}

sub update_password {
  fnct::derror(1003, "Password Too Short") if(length($frm->{'np'}) < 5);
  fnct::derror(1004, "Passwords Don't Match") if($frm->{'np'} ne $frm->{'vp'});
  
  $frm->{'pw'} = $frm->{'np'};
  my $cp       = crypt($frm->{'np'}, 'aa');
  
  open(PASS, ">$fnct::sd_dir/admin.epf") || fnct::serror("admin.epf", "adm::update_password()", $!, $frm);
  print PASS $cp;
  close(PASS);
  
  log_in("Admin Password Updated");
}

sub remove_icons {
  my @icons = split(/,/, $frm->{'icons'});

  dbmopen(%data, "$fnct::sd_dir/info", 0666) || fnct::serror("info", "adm::remove_icons()", $!, $frm);
  
  for(@icons) {
    delete $data{$_};
  }
  
  dbmclose(%data);
  
  display_icons("Icon(s) Successfully Removed");
}

sub add_icon {  
  fnct::derror(1007, "No Name Entered") if($frm->{'in'} eq "");
  
  my $key = "icon_" . $frm->{'in'};
  
  dbmopen(%data, "$fnct::sd_dir/info", 0666) || fnct::serror("info", "adm::add_icon()", $!, $frm);
  $data{$key} = $frm->{'iu'};
  dbmclose(%data);
  
  display_icons("Icon Successfully Added");
}

sub update_ban_list {  
  my $item  = lc($frm->{'ban'});
  my $key   = $frm->{'type'} . "_" . int( rand(9999) );
  my $fnd   = 0;
  
  dbmopen(%bans, "$fnct::sd_dir/bans", 0666) || fnct::serror("bans", "adm::update_ban_list()", $!, $frm);

  if($frm->{'action'} eq "Added To") {
    while( defined $bans{$key} ) {
      $key   = $frm->{'type'} . "_" . int( rand(9999) );
    }
    $bans{$key} = $item;
    $fnd = 1; 
  }
  else {
    my @poss = grep { /^$frm->{'type'}\_/ } keys %bans;
    for( @poss ) {
      if( $bans{$_} eq $item ) {
        delete $bans{$_};
	$fnd = 1;
	last;
      }
    }
  }
  
  dbmclose(%bans);
  
  $frm->{'action'} = "Not Found In" if( !$fnd );
  
  display_bans("'$item' $frm->{'action'} the $frm->{'type'} Ban List");
}

sub get_choice {
  return int( $_[0] ) ? '<option value="1" selected>No</option><option value="0">Yes</option>' : 
                        '<option value="1">No</option><option value="0" selected>Yes</option>';
}

sub get_cat_select {
  my($cur, $html) = shift;
 
  $html = "<option value='$cur' selected>$cur</option>";
  
  for( split(/,/, $VAR::CT) ) {
    $html .= "<option value='$_'>$_</option>";
  }
  
  return $html;
}

sub get_all {
  my( $key, $html ) = shift;
  $key = "|" if( !defined $key );
  
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::get_all()", $!, $frm);
  
  my $color = "#ffffff";
  for( sort keys %mem ) {
    if( $_ !~ /_REV$/ ) {
      if( $mem{$_} =~ /$key/i ) {
        my @md = split( /\|/, $mem{$_} );
      
        $html .= qq|<tr bgcolor="$color">\n<td>\n<input type="checkbox" name="members" value="$_"><nobr>|;
        $html .= qq|<font face="Verdana,Arial" size="1">$_\n</td>\n<td>\n<font face="Verdana,Arial" size="1">|;
        $html .= qq|<a href="$md[8]" target="_new">$md[5]</a> - $md[6]\n<br><b>Banner:</b>\n|;
        $html .= $md[9] ne "" ? qq|<a href="javascript:openBanner('$md[9]');">Click To View</a><br>| : "None<br>";
	$html .= qq|<font color="red"><b>Suspended</b></font><br>| unless( int($md[13]) );
	$html .= qq|<font color="red"><b>Locked</b></font>| unless( int($md[14]) );
	$html .= qq|\n</td>\n<td align="center">\n|;
        $html .= qq|<font face="Verdana,Arial" size="1">$md[0]\n</td>\n<td align="center">\n|;
        $html .= qq|<font face="Verdana,Arial" size="1">$md[1]\n</td>\n<td align="center">\n|;
        $html .= qq|<font face="Verdana,Arial" size="1">$md[2]\n</td></tr>|;
	$color = $color eq "#ffffff" ? "#ececec" : "#ffffff";
      }
    }
  }
  $html;
}

sub get_new {
  my( $key, $html ) = shift;
  $key = "|" if( !defined $key );
  
  dbmopen(%mem, "$fnct::sd_dir/members", 0666) || fnct::serror("members", "adm::get_new()", $!, $frm);
  
  for( sort keys %mem ) {
    if( $_ =~ /_REV$/ ) {
      my @md = split( /\|/, $mem{$_} );
      
      $html .= qq|<tr bgcolor="#ffffff">\n<td>\n<input type="checkbox" name="members" value="$_"><nobr>|;
      $html .= qq|<font face="Verdana,Arial" size="1">$_\n</td>\n<td>\n<font face="Verdana,Arial" size="1">|;
      $html .= qq|<a href="$md[8]" target="_new">$md[5]</a> - $md[6]\n<br>\n<b>Category:</b> $md[7]<br>\n|;
      $html .= qq|<b>E-mail Address:</b> $md[10]\n<br><b>Banner:</b>\n|;
      $html .= $md[9] ne "" ? qq|<a href="javascript:openBanner('$md[9]');">Click To View</a>| : "None";
      $html .= qq|</td>\n</tr>\n|;
    }
  }
  $html;
}

sub get_iconcb_html {
  my $input = shift;
  
  dbmopen(%data, "$fnct::sd_dir/info", 0666) || fnct::serror("info", "adm::get_iconcb_html()", $!, $frm);
  my @options = grep { /^icon_/ } keys %data;
  
  my $html = "";
  for(@options) {
    $html .= qq|<input type="checkbox" name="icons" value="$_"|;
    $html .= ($input =~ m/$_/) ? " checked>\n" : ">\n";
    $html .= qq|<img src="$data{$_}" border="0"><br>\n|;
  }
  dbmclose(%data);
  
  return $html;
}

sub get_page_select {
  my $html = qq|<select name="page">\n|;
  
  for( split( /,/, $VAR::PL ) ) {
    $html .= qq|<option value="$_">$_</option>|;
  }
  
  $html .= qq|<option value="quick.html">index.cgi</option>|;
  $html .= qq|<option value="search.html">search.cgi</option>|;
  $html .= "</select>";
  $html;
}

sub get_bans_html {
  my @html;

  dbmopen(%bans, "$fnct::sd_dir/bans", 0666) || fnct::serror("bans", "adm::get_bans_html()", $!, $frm);
  
  for( keys %bans ) {
    if( $_ =~ /^word_/ ) {
      $html[1] .= "$bans{$_}<br>";
    }
    elsif( $_ =~ /^url_/ ) {
      $html[2] .= "$bans{$_}<br>";
    }
    else {
      $html[0] .= "$bans{$_}<br>";
    }
  }
  
  dbmclose(%bans);
  
  return \@html;
}

sub get_break_selection {
  my $html = qq|<select name="loc">\n|;
  
  my @breaks = split(/,/, $VAR::BA);
  
  for( @breaks ) {
    $html .= qq|<option value="$_">$_</option>|;
  }
  
  $html .= "</select>";
  return $html;
}

sub back_to_main_page {
  log_in();
}
