#!/usr/bin/perl
####################################
##  AutoRank Professional v2.1.1  ##
###############################################################
##  search.cgi                                               ##
##  ----------                                               ##
##  This script will allow surfers to search your database.  ##
###############################################################

###############################################################
##                   DO NOT EDIT THIS FILE                   ##
###############################################################

package sch;

use strict;
use GDBM_File;

$sch::sd_dir = "./sdata";
## Script Data Directory

my($frm, %mem, %data, %tmpl);

print "Content-type: text/html\n\n";

eval {
  main();
};

if( $@ ) {
  print "<b>Script Error:</b> $@";
}

sub main {
  $frm = parse();
  
  require "$sch::sd_dir/vars.dat";
  require "$sch::sd_dir/search.html";
  
  print $HTML::HEADER;
  
  my $total = 0;
  
  if( $frm->{'keyword'} ne "" && length($frm->{'keyword'}) >= 3 ) { 
    dbmopen(%data, "$sch::sd_dir/info", 0666) || error("info", "sch::get_icon_html()", $!, undef);
    my @options = grep { /^icon_/ } keys %data;
  
    dbmopen(%mem, "$sch::sd_dir/members", 0666) || error("members", "sch::main()", $!, $frm);
  
    
    for( keys %mem ) {
      %tmpl = ();
    
      if( $mem{$_} =~ /$frm->{'keyword'}/i ) {
        my @md = split(/\|/, $mem{$_});
      
        $tmpl{'NEW'}       = ( (time - $md[17]) <= $VAR::NS && $OPT::NEW ) ? qq|<img src="$VAR::NI" border="0">| : "";
        $tmpl{'URL'}       = int( $OPT::OUT ) ? $VAR::CU . "/out.cgi?" . $_ : $md[8];
        $tmpl{'IN'}        = $md[0];
        $tmpl{'OUT'}       = $md[1];
        $tmpl{'DESC'}      = $md[6];
        $tmpl{'CAT'}       = $md[7];
        $tmpl{'TITLE'}     = $md[5];
        $tmpl{'ICONS'}     = get_icon_html($md[15], \@options, \%data);
      
        parsetmpl($HTML::TMPL, \%tmpl);
	$total++;
      }
    }
    
    dbmclose(%mem);
    dbmclose(%data);
  }
  else {
    print "No keyword entered, or keyword too short";
  }
  
  $tmpl{'TOTAL'}  = $total;
  $tmpl{'SEARCH'} = $frm->{'keyword'};
  
  parsetmpl($HTML::FOOTER, \%tmpl);
}

sub parse {
  my ($value, $name, $buffer, %form);
  read(STDIN, $buffer, $ENV{'CONTENT_LENGTH'});
  my @pairs = split(/&/, $buffer);
	
  for (@pairs) {
    ($name, $value) = split(/=/, $_);
    $value =~ tr/+/ /;
    $value =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
    $value =~ s/~!/ ~!/g;
    $form{$name} .= (defined $form{$name}) ? "," . $value : $value;
  }
  
  return \%form;
}

sub parsetmpl {
  my($html, $tmpl) = @_;
  
  $html =~ s/#%(.*?)%#/$tmpl->{$1}/gise;

  print $html;
}

sub get_icon_html {
  my($input, $options, $data) = @_;
  
  my $html = "";
  for(@{ $options }) {
    if( defined $data->{$_} ) {
      $html .= qq|<img src="$data{$_}" border="0">| if($input =~ m/^$_,|,$_,|,$_$|^$_$/);
    }
  }
  
  return $html;
}

sub error {
  my($file, $fnct, $cause, $frm) = @_;
  my $user  = (getpwuid( $< ))[0];
  my $group = (getgrgid( $) ))[0];
  
  if( $OPT::ERR ) {
    open(ERRLOG, ">>$sch::sd_dir/error.log");
    print ERRLOG "[ ", scalar(localtime()), " ]  [ $ENV{'REMOTE_ADDR'} ]  [ $file ]  [ $cause ]  [ $fnct ]\n";
    close(ERRLOG);
  }
  
  print "<pre>\nA CGI ERROR HAS OCCURRED\n========================\n";
  print "Error Message     :  $cause\n";   
  print "Accessing File    :  $file\n";
  print "Calling Function  :  $fnct\n";
  print "Running as User   :  $user\n";
  print "Running as Group  :  $group\n";
  print "Script Filename   :  $ENV{'SCRIPT_FILENAME'}\n";
  
  if( scalar( keys %{ $frm } ) ) {
    print "\nFORM VARIABLES\n==============\n";
    for (sort keys %{ $frm }) {
      my $space = " " x (18 - length($_));
      print "$_$space:  $frm->{$_}\n";
    }
  }
  
  exit -1;
}
